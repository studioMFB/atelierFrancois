EffectComposer.vue
<script setup lang="ts">
import { computed, inject, ref, type Ref } from "vue";

import { Scene, WebGLRenderer, PerspectiveCamera, Vector2 } from "three";

import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';
import { OutlinePass } from "three/examples/jsm/postprocessing/OutlinePass.js";
import { RenderPass } from "three/examples/jsm/postprocessing/RenderPass.js";

// const props = defineProps<{
//     outlinePass: OutlinePass;
//     composer: EffectComposer;
// }>();

// const outlinePass = ref(props.outlinePass);
// const composer = ref(props.composer);

const renderer = ref(inject("WebGlrenderer")) as Ref<WebGLRenderer>;
const scene = ref(inject("MainScene")) as Ref<Scene>;
const camera = ref(inject("PerspectiveCamera")) as Ref<PerspectiveCamera>;

const composer = new EffectComposer(renderer.value);
const renderPass = new RenderPass(scene.value, camera.value);
composer.addPass(renderPass);

const outlinePass = new OutlinePass(new Vector2(window.innerWidth, window.innerHeight), scene.value, camera.value);
composer.addPass(outlinePass);

outlinePass.edgeStrength = 3;
outlinePass.edgeGlow = 0.7;
outlinePass.edgeThickness = 1;
outlinePass.pulsePeriod = 2;
outlinePass.visibleEdgeColor.set('#ff0000'); // red color
outlinePass.hiddenEdgeColor.set('#190a05');
</script>

<template>
    <!-- <slot :outlinePass="outlinePass" :composer="composer"></slot> -->
     <slot></slot>
</template>

ResizerComponent.vue
<script setup lang="ts">
import { computed, inject, ref } from "vue";

import { PerspectiveCamera, WebGLRenderer } from "three";
import type { OutlinePass } from "three/examples/jsm/postprocessing/OutlinePass.js";
import type { EffectComposer } from "three/examples/jsm/postprocessing/EffectComposer.js";


// const props = defineProps<{
//     outlinePass: OutlinePass;
//     composer: EffectComposer;
// }>();

const renderer = computed(() => inject("WebGlrenderer") as WebGLRenderer);
const camera = computed(() => inject("PerspectiveCamera") as PerspectiveCamera);

// const outlinePass = ref(props.outlinePass);
// const composer = ref(props.composer);

setSize();

window.addEventListener('resize', () => {
    setSize();
});

function setSize(): void {
    const width = window.innerWidth;
    const height = window.innerHeight;

    
    camera.value.updateProjectionMatrix();
    
    renderer.value.setSize(width, height);
    renderer.value.setPixelRatio(window.devicePixelRatio);
    
    // camera.value.aspect = window.innerWidth / window.innerHeight *.5;
    camera.value.aspect = width / height;
    camera.value.updateProjectionMatrix();

    renderer.value.setSize(width, height);
//     composer.value.setSize(width, height);
//     outlinePass.value.setSize(width, height);
}
</script>

<template>
    <slot></slot>
</template>

HemispherLight.vue
<script setup lang="ts">
import { computed, inject } from 'vue';

import { type ColorRepresentation, HemisphereLight, Scene, Vector3 } from 'three';


const props = defineProps<{
    position?: Vector3,
    skyColour?: ColorRepresentation,
    groundColour?: ColorRepresentation,
    intensity?: number
}>();

const scene = computed(() => inject("MainScene") as Scene);
const position = computed(() => props.position);
const skyColour = computed(() => props.skyColour);
const groundColour = computed(() => props.groundColour);
const intensity = computed(() => props.intensity);

const light = new HemisphereLight(skyColour.value, groundColour.value, intensity.value);

// console.log("HemisphereLight => light ", light.value);
scene.value.add(light);
</script>

<template>
    <slot></slot>
</template>

SpotLight.vue
<script setup lang="ts">
import { computed, inject } from 'vue';

import { type ColorRepresentation, Scene, SpotLight, Vector3 } from 'three';


const props = defineProps<{
    position?: Vector3,
    colour?: ColorRepresentation,
    intensity?: number
}>();

const scene = computed(() => inject("MainScene") as Scene);
const position = computed(() => props.position);
const colour = computed(() => props.colour);
const intensity = computed(() => props.intensity);

const light = new SpotLight(colour.value, intensity.value);
// light.castShadow = true;
// light.shadow.radius = 15;

light.angle = Math.PI / 5;
light.penumbra = 0.3;

if(position.value)
    light.position.set(position.value.x, position.value.y, position.value.z);

light.castShadow = true;

light.shadow.camera.near = 10;
light.shadow.camera.far = 200;
light.shadow.mapSize.width = 200;
light.shadow.mapSize.height = 200;
light.shadow.bias = - 0.005;
light.shadow.radius = 20;

scene.value.add(light);
</script>

<template>
    <slot></slot>
</template>

PointLight.vue
<script setup lang="ts">
import { computed, inject } from 'vue';

import { type ColorRepresentation, PointLight, Scene, Vector3 } from 'three';


const props = defineProps<{
    position?: Vector3,
    colour?: ColorRepresentation,
    intensity?: number
}>();

const scene = computed(() => inject("MainScene") as Scene);
const position = computed(() => props.position);
const colour = computed(() => props.colour);
const intensity = computed(() => props.intensity);

const light = new PointLight(colour.value, intensity.value);
const power = 700;
// const distance = 100;

if(position.value)
    light.position.set(position.value.x, position.value.y, position.value.z);

light.castShadow = false;
light.power = power;

scene.value.add(light);
</script>

<template>
    <slot></slot>
</template>

GridHelper.vue
<script setup lang="ts">
import { computed, inject } from 'vue';

import { type ColorRepresentation, GridHelper, Scene } from 'three';


const props = defineProps<{
    size?: number,
    divisions?: number,
    colour1?: ColorRepresentation,
    colour2?: ColorRepresentation,
}>();

const scene = computed(() => inject("MainScene") as Scene);
const size = computed(() => props.size);
const divisions = computed(() => props.divisions);
const colour1 = computed(() => props.colour1);
const colour2 = computed(() => props.colour2);

const grid = new GridHelper(size.value, divisions.value, colour1.value, colour2.value);

scene.value.add(grid);
</script>

<template>
    <slot></slot>
</template>

PlaneGeometry.vue
<script setup lang="ts">
import { computed, inject, onMounted} from 'vue';

import { Color, DoubleSide, ExtrudeGeometry, Group, Mesh, MeshBasicMaterial, MeshStandardMaterial, 
    PlaneGeometry, Scene, ShadowMaterial, Shape, Vector2, Vector3, type Object3DEventMap } from 'three';


const props = defineProps<{
    dimension: Vector2,
    segment: Vector2,
    position: Vector3,
}>();

const scene = computed(() => inject("MainScene") as Scene);
const dimension = computed(() => props.dimension);
const segment = computed(() => props.segment);
const position = computed(() => props.position);

const modelScene: Group<Object3DEventMap> = new Group<Object3DEventMap>();

function roundEdgedBox() {
    const w = 5.2;
    const d = 5.2;
    const r = 0.2;
    const h = 0.1;

    //Generate the rounded rect shape
    const shape = new Shape();

    shape.moveTo(-w / 2, -d / 2 + r);
    shape.lineTo(-w / 2, d / 2 - r);
    shape.absarc(-w / 2 + r, d / 2 - r, r, 1 * Math.PI, 0.5 * Math.PI, true);
    shape.lineTo(w / 2 - r, d / 2);
    shape.absarc(w / 2 - r, d / 2 - r, r, 0.5 * Math.PI, 0 * Math.PI, true);
    shape.lineTo(w / 2, -d / 2 + r);
    shape.absarc(w / 2 - r, -d / 2 + r, r, 2 * Math.PI, 1.5 * Math.PI, true);
    shape.lineTo(-w / 2 + r, -d / 2);
    shape.absarc(-w / 2 + r, -d / 2 + r, r, 1.5 * Math.PI, 1 * Math.PI, true);

    //This is the material that is used to stop the
    //lines in the back from showing
    const mat = new MeshBasicMaterial({
        color: new Color(0xe5e0d8),
        side: DoubleSide,
        depthTest: true,
        polygonOffset: true,
        polygonOffsetFactor: 1,
        polygonOffsetUnits: 1
    });

    const geom = new ExtrudeGeometry(shape, { depth: h, bevelEnabled: false });

    const mesh = new Mesh(geom, mat);
    mesh.rotateX(1.57);
    mesh.position.y = -0.01;

    scene.value.add(mesh);
}

function initMesh(isVisible: boolean, opacity: number, colour?: Color): void {
    // GROUND //
    const geometry: PlaneGeometry = new PlaneGeometry(dimension.value.x, dimension.value.y, segment.value.x, segment.value.y);
    geometry.rotateX(- Math.PI / 2);

    const material = new MeshStandardMaterial({
        color: colour || new Color(0xff0000),
        visible: isVisible,
        opacity: opacity,
    });
    const ground = new Mesh(geometry, material);
    ground.name = "Main_Plane";
    ground.receiveShadow = false;

    ground.position.set(position.value.x, position.value.y, position.value.z);

    // SHADOW GROUND //
    const shadowGround: Mesh = ground.clone();
    shadowGround.material = new ShadowMaterial({
        opacity: .5,
        color: "#888888",
        side: DoubleSide,
        transparent: true
    });

    shadowGround.receiveShadow = true;
    shadowGround.position.set(position.value.x + 0.01, position.value.y + 0.01, position.value.z + 0.01);

    roundEdgedBox();

    modelScene.add(ground);
    modelScene.add(shadowGround);

    scene.value.add(modelScene);

    // Update transforms for modelScene and its children
    modelScene.updateMatrixWorld(true);
}

initMesh(false, 1);

onMounted(() => {
    // For Raycasting
    const allModelsArray = inject("allModelsArray", [] as Group<Object3DEventMap>[]);
    allModelsArray.push(modelScene);
})
</script>

<template>
    <slot></slot>
</template>

ModelAsset.vue
<script setup lang="ts">
import { computed, inject } from 'vue';

import { Box3, BoxHelper, Color, Group, Mesh, MeshBasicMaterial, MeshStandardMaterial, MeshToonMaterial,
    type Object3DEventMap, PlaneGeometry, Scene, Vector3 } from 'three';
import { type GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';


const props = defineProps<{
    name: string,
    position: Vector3,
    scaleRatio: number,
    gltfUrl: string,
}>();

const scene = computed(() => inject("MainScene") as Scene);
const name = computed(() => props.name);
const position = computed(() => props.position);
const scaleRatio = computed(() => props.scaleRatio);
const gltfUrl = computed(() => props.gltfUrl);

// Colour //
const COLOUR_SELECTED = '#f47653';
const COLOUR_UNSELECTED = '#e2eab8';

const allModelsArray = inject("allModelsArray", [] as Group<Object3DEventMap>[]);

let boundingBox: Box3;
let boxHelper: BoxHelper;
let modelScene: Group<Object3DEventMap>;

async function initMesh(scene: Scene, modelsArray: Group<Object3DEventMap>[]): Promise<void> {
    const loader = new GLTFLoader();

    const parameters = {
        color: new Color(0xe2eab8)
    }

    const matToon = new MeshToonMaterial(parameters);
    matToon.opacity = .005;
    const matColor = new MeshBasicMaterial({ color: 0x3c3c3c });

    loader.load(gltfUrl.value, (gltf: GLTF) => {

        modelScene = gltf.scene;

        gltf.scene.traverse((child: any) => {
            if (child.isMesh) {
                child.geometry.computeBoundingBox();
            }

            if (child.name.toLowerCase().includes("outline")) {
                child.material = matColor;
            }
            else {
                child.material = matToon;
                child.castShadow = true;
            }

            child.name += "-model";
        });

        modelScene.name = 'root_model_scene';
        modelScene.scale.multiplyScalar(scaleRatio.value);
        modelScene.position.set(position.value.x, position.value.y, position.value.z);

        // boxHelper = new BoxHelper(modelScene, 0xff0000);
        // boxHelper.name = 'boxHelper_model';
        // boundingBox = new Box3().setFromObject(boxHelper);
        // boxHelper.update();

        // If you want a visible bounding box
        scene.add(modelScene);
        // scene.add(this.scene, this.boxHelper);
        modelsArray.push(modelScene);
    });
}

// DEVELOPMENT ONLY
initMesh(scene.value, allModelsArray).then(() => {
    // GHOST //        
    const bboxSize = new Vector3(1.5, 0, 0.55);

    const geometry = new PlaneGeometry(bboxSize.x, bboxSize.z, 1, 1);
    geometry.rotateX(- Math.PI / 2);
    geometry.rotateY(- Math.PI / 2);

    const material = new MeshStandardMaterial({
        color: new Color(COLOUR_SELECTED),
        visible: true,
        opacity: 0.4,
    });

    const ghost = new Mesh(geometry, material);
    ghost.name = "ghost";
    ghost.receiveShadow = true;
    ghost.position.set(-0.1, 0, 0);
    scene.value.add(ghost);
});
</script>

<template>
    <slot></slot>
</template>

Model.ts
import { Mesh, Vector3, Scene, Group, MeshToonMaterial, Color, type Object3DEventMap, MeshBasicMaterial, BoxHelper, Box3 } from "three";
import { type GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';


export class Model extends Mesh {

  scaleRatio: number;
  pos: Vector3;

  group?: Group;
  modelScene?: Group<Object3DEventMap>;
  mesh?: Mesh;
  move?: boolean;

  boundingBox?: Box3;
  boxHelper?: BoxHelper;

  gltfUrl: string;


  constructor(name: string, pos: Vector3, scaleRatio: number, gltfUrl: string) {
    super()

    this.name = name;
    this.scaleRatio = scaleRatio;
    this.pos = pos;

    this.gltfUrl = gltfUrl;
  }

  changeColour(colour: string) {
    if (!this.modelScene)
      return;

    this.modelScene.traverse((child: any) => {
      if (child.isMesh) {
        if (!child.name.toLowerCase().includes("outline")) {
          (child.material as MeshToonMaterial).color = new Color(colour);
        }
      }
    });
  }

  async initMesh(): Promise<Group<Object3DEventMap>> {
    const loader = new GLTFLoader();

    return new Promise((resolve, reject) => {
      loader.load(
        this.gltfUrl,
        (gltf: GLTF) => {
          this.modelScene = gltf.scene;

          const parameters = {
            color: new Color(0xe2eab8),
          };

          const matToon = new MeshToonMaterial(parameters);
          matToon.opacity = 0.005;
          const matColor = new MeshBasicMaterial({ color: 0x3c3c3c });

          gltf.scene.traverse((child: any) => {
            if (child.isMesh) {
              child.geometry.computeBoundingBox();
            }

            if (child.name.toLowerCase().includes("outline")) {
              child.material = matColor;
            } else {
              child.material = matToon;
              child.castShadow = true;
            }

            child.name += "_model";
          });

          this.modelScene.name = "root_model";
          this.modelScene.scale.multiplyScalar(this.scaleRatio);
          this.modelScene.position.set(this.pos.x, this.pos.y, this.pos.z);

          // this.boxHelper = new BoxHelper(this.modelScene, 0xff0000);
          // this.boxHelper.name = "boxHelper_model";
          // this.boundingBox = new Box3().setFromObject(this.boxHelper);
          // this.boxHelper.update();

          // Update transforms for modelScene and its children
          this.modelScene.updateMatrixWorld(true);

          // Resolve the promise with the loaded model
          resolve(this.modelScene);
        },
        undefined,
        (error) => {
          console.error("Error loading model:", error);
          reject(error); // Reject the promise on error
        }
      );
    });
  }

  updateMatrix(delta?: number) {
    if (!delta)
      delta = 1;

    if (!this.modelScene)
      return;

    if (this.boxHelper) {
      this.boxHelper.position.set(this.modelScene.position.x * delta, this.modelScene.position.y * delta, this.modelScene.position.z * delta);
      this.boxHelper.update();
    }

    if (this.boundingBox)
      this.boundingBox.setFromObject(this.modelScene);
  }

  tick(delta?: number): void {
    if (!this.modelScene)
      return;

    this.updateMatrix(delta);
  }

}
